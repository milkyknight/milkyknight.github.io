<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李同学的博客</title>
  
  <subtitle>我在巡司河旁唱歌</subtitle>
  <link href="https://lowbattery.cn/atom.xml" rel="self"/>
  
  <link href="https://lowbattery.cn/"/>
  <updated>2021-10-14T06:42:11.915Z</updated>
  <id>https://lowbattery.cn/</id>
  
  <author>
    <name>MilkyKnight</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis在Linux上的安装和基本语法</title>
    <link href="https://lowbattery.cn/passages/Redis%E5%9C%A8Linux%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://lowbattery.cn/passages/Redis%E5%9C%A8Linux%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2021-10-14T06:41:16.000Z</published>
    <updated>2021-10-14T06:42:11.915Z</updated>
    
    <content type="html"><![CDATA[<p>redis在Linux上的部署</p><p>从官网下载Linux安装包，通过xshell选择<code>sftp</code>连接传输安装包到 <code>/hone</code> 目录中</p><p><code>put ../redis-6.2.6.tar.gz /home </code> </p><p>然后移动安装包到 <code>/opt </code>  </p><p><code>tar -zxvf redis-6.2.6.tar.gz</code>   解压缩命令</p><p><code>usr/local/bin</code> 目录用于目录安装路径</p><p><code>cp /opt/redis-6.2.6/redis.conf kconfig</code> 复制<code>redis.conf</code> 到目录中</p><p><code>vim redis.conf</code>    <code>daemonize</code> 改为 yes</p><p><code>redis-server kconfig/redis.conf</code> 开启redis服务</p><p><code>redis-cli -p 6379</code>  开启端口号</p><h3 id="redis-benchmark"><a href="#redis-benchmark" class="headerlink" title="redis-benchmark"></a>redis-benchmark</h3><p>官方自带的压力测试工具</p><p>在<code>usr/local/bin</code>下运行</p><p><code>redis-benchmark -h localhost -p 6379 -c 100 -n 10000</code> 本地压力测试 100 个线程每个线程10000条请求，每次写入3字节 </p><p>redis默认有16个数据库，<code>select</code> 切换数据库， <code>DBSIZE</code> 查看数据库大小</p><p><code>get</code> 方法获取键值</p><p><code>set</code> 方法设置键值</p><p><code>keys *</code> 查看当前所有点键值</p><p><code>flushdb</code> 清空当前数据库</p><p><code>FLUSHALL</code> 清空所有数据库</p><p><code>EXISTS [key]</code> 查看是否存在</p><p><code>MOVE [key] [dbNum]</code> 移除键值</p><p><code>EXPIRE [key] [sec]</code> key值在sec秒后过期</p><p><code>type [key]</code> 查看key的类型</p><p><code>APPEND [key]</code> 追加长度</p><p><code>STRLEN [key] </code>  返回字符串长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setnx mykey  <span class="string">&quot;MongoDB&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3</span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v5 k4 v4  <span class="comment"># 要么一起成功，要么一起失败 原子性</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get k4</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; getset k1 <span class="string">&quot;woow&quot;</span></span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>![image-20211012204616420](/Users/apple/Library/Application Support/typora-user-images/image-20211012204616420.png)</p><p>Redis 是单线程的却非常快， Redis是基于内存操作的，cpu并不是瓶颈，Redis的瓶颈是内存和网络带宽</p><p>Redis用C语言编写</p><p>运行速度 CPU&gt;内存&gt;硬盘</p><p>核心 redis将所有的数据放在内存中， 所以单线程的效率最高，多线性(cpu上下文耗时操作)</p><p>Redis可以用作数据库，缓存和消息队列MQ</p><h3 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h3><p><strong>Redis-key</strong></p><p><strong>String</strong></p><p><strong>List</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush list one</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1 <span class="comment">#从左往右输出全部的元素</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; llen list  <span class="comment">#求队列长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt;  rpush list four</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lpush list five</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;five&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">5) <span class="string">&quot;four&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpush list five</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list four</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lpush list one</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line">4) <span class="string">&quot;four&quot;</span></span><br><span class="line">5) <span class="string">&quot;five&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ltrim list 1 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lpush list one   <span class="comment">#左插一个元素进队列</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; lpush list tree</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list otherlist  <span class="comment">#右出左插一个元素到另一个队列</span></span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) <span class="string">&quot;tree&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrange otherlist 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br></pre></td></tr></table></figure><p><strong>Set</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> <span class="string">&quot;hello&quot;</span> <span class="comment">#往set中插入一个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd <span class="built_in">set</span> <span class="string">&quot;world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span>  <span class="comment">#查看全部值</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sismember <span class="built_in">set</span> hello  <span class="comment">#查看值是否在set中</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sismember <span class="built_in">set</span> who</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; srem <span class="built_in">set</span> hello  <span class="comment"># 移除某个元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers <span class="built_in">set</span></span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; srandmember <span class="built_in">set</span>   <span class="comment">#随机一个元素</span></span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd key1 a</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key1 b</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key1 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 c</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 d</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd key2 e</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sdiff key1 key2   <span class="comment"># key1与key2的差集</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sinter key1 key2 <span class="comment"># 交集</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; sunion key1 key2  <span class="comment"># 并集</span></span><br><span class="line">1) <span class="string">&quot;e&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">3) <span class="string">&quot;c&quot;</span></span><br><span class="line">4) <span class="string">&quot;d&quot;</span></span><br><span class="line">5) <span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;redis在Linux上的部署&lt;/p&gt;
&lt;p&gt;从官网下载Linux安装包，通过xshell选择&lt;code&gt;sftp&lt;/code&gt;连接传输安装包到 &lt;code&gt;/hone&lt;/code&gt; 目录中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;put ../redis-6.2.6.tar.gz /h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文件管理 - Linux入门常用基本操作</title>
    <link href="https://lowbattery.cn/passages/Linux%E5%85%A5%E9%97%A8%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://lowbattery.cn/passages/Linux%E5%85%A5%E9%97%A8%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-10-14T06:31:48.000Z</published>
    <updated>2021-10-14T06:39:59.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote><p>绝对路径和相对路径</p></blockquote><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p><strong>绝对路径：</strong></p><p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p><p><strong>相对路径：</strong></p><p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man</p><blockquote><p>处理目录的常用命令</p></blockquote><p>接下来我们就来看几个常见的处理目录的命令吧：</p><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul><p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>ls （列出目录）</p></blockquote><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># ls [-aAdfFhilnrRSt] 目录名称</span></span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p>将目录下的所有文件列出来(含属性与隐藏档)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># ls -al ~</span></span><br></pre></td></tr></table></figure><blockquote><p>cd （切换目录）</p></blockquote><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [相对路径或绝对路径]b</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到用户目录下</span></span><br><span class="line">[root@kuangshen /]<span class="comment"># cd home  </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 mkdir 命令创建 kuangstudy 目录</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mkdir kuangstudy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 kuangstudy 目录</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cd kuangstudy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到上一级</span></span><br><span class="line">[root@kuangshen kuangstudy]<span class="comment"># cd ..</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到根目录</span></span><br><span class="line">[root@kuangshen kuangstudy]<span class="comment"># cd /</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示回到自己的家目录，亦即是 /root 这个目录</span></span><br><span class="line">[root@kuangshen kuangstudy]<span class="comment"># cd ~</span></span><br></pre></td></tr></table></figure><p>接下来大家多操作几次应该就可以很好的理解 cd 命令的。</p><blockquote><p>pwd ( 显示目前所在的目录 )</p></blockquote><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen kuangstudy]<span class="comment">#pwd [-P]</span></span><br></pre></td></tr></table></figure><p>选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单纯显示出目前的工作目录</span></span><br><span class="line">[root@kuangshen ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是链接，要显示真实地址，可以使用 -P参数</span></span><br><span class="line">[root@kuangshen /]<span class="comment"># cd bin</span></span><br><span class="line">[root@kuangshen bin]<span class="comment"># pwd -P</span></span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure><blockquote><p>mkdir （创建新目录）</p></blockquote><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入我们用户目录下</span></span><br><span class="line">[root@kuangshen /]<span class="comment"># cd /home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 test 文件夹</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mkdir test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建多层级目录</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mkdir test1/test2/test3/test4</span></span><br><span class="line">mkdir: cannot create directory ‘test1/test2/test3/test4’:</span><br><span class="line">No such file or directory  <span class="comment"># &lt;== 没办法直接创建此目录啊！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加了这个 -p 的选项，可以自行帮你创建多层目录！</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mkdir -p test1/test2/test3/test4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建权限为 rwx--x--x 的目录。</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mkdir -m 711 test2</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># ls -l</span></span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 12 21:55 <span class="built_in">test</span></span><br><span class="line">drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span><br><span class="line">drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span><br></pre></td></tr></table></figure><blockquote><p>rmdir ( 删除空的目录 )</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 看看有多少目录存在？</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># ls -l</span></span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 12 21:55 <span class="built_in">test</span></span><br><span class="line">drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span><br><span class="line">drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可直接删除掉，没问题</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># rmdir test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为尚有内容，所以无法删除！</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># rmdir test1</span></span><br><span class="line">rmdir: failed to remove ‘test1’: Directory not empty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># rmdir -p test1/test2/test3/test4</span></span><br></pre></td></tr></table></figure><p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将！</p><blockquote><p>cp ( 复制文件或目录 )</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># cp [-adfilprsu] 来源档(source) 目标档(destination)</span></span><br><span class="line">[root@www ~]<span class="comment"># cp [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li><li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li><li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找一个有文件的目录，我这里找到 root目录</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cd /root</span></span><br><span class="line">[root@kuangshen ~]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line">[root@kuangshen ~]<span class="comment"># cd /home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 root目录下的install.sh 到 home目录下</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cp /root/install.sh /home</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次复制，加上-i参数，增加覆盖询问？</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cp -i /root/install.sh /home</span></span><br><span class="line">cp: overwrite ‘/home/install.sh’? y <span class="comment"># n不覆盖，y为覆盖</span></span><br></pre></td></tr></table></figure><blockquote><p>rm ( 移除文件或目录 )</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [-fir] 文件或目录</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！</span><br><span class="line">[root@kuangshen home]# rm -i install.sh</span><br><span class="line">rm: remove regular file ‘install.sh’? y</span><br><span class="line"># 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</span><br><span class="line"></span><br><span class="line"># 尽量不要在服务器上使用 rm -rf /</span><br></pre></td></tr></table></figure><blockquote><p>mv  ( 移动文件与目录，或修改名称 )</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># mv [-fiu] source destination</span></span><br><span class="line">[root@www ~]<span class="comment"># mv [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制一个文件到当前目录</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cp /root/install.sh /home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个文件夹 test</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mkdir test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将复制过来的文件移动到我们创建的目录，并查看</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mv install.sh test</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># ls</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cd test</span></span><br><span class="line">[root@kuangshen <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件夹重命名，然后再次查看！</span></span><br><span class="line">[root@kuangshen <span class="built_in">test</span>]<span class="comment"># cd ..</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># mv test mvtest</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># ls</span></span><br><span class="line">mvtest</span><br></pre></td></tr></table></figure><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><blockquote><p>看懂文件属性</p></blockquote><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组</p><p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件；</li><li>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>从左至右用0-9这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中：</p><p>第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p><p>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><blockquote><p>修改文件属性</p></blockquote><p><strong>1、chgrp：更改文件属组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown [–R] 属主名 文件名</span><br><span class="line">chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><p><strong>3、chmod：更改文件9个属性</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r:4     w:2         x:1</span><br></pre></td></tr></table></figure><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= — = 0+0+0 = 0</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 770 filename</span><br></pre></td></tr></table></figure><p>可以自己下去多进行测试！</p><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote><p>概述</p></blockquote><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl  显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>cat 由第一行开始显示文件内容</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [-AbEnTv]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/</span></span><br><span class="line">[root@kuangshen ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">DEVICE=eth0</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure><blockquote><p>tac</p></blockquote><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen ~]<span class="comment"># tac /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=dhcp</span><br><span class="line">DEVICE=eth0</span><br></pre></td></tr></table></figure><blockquote><p>nl  显示行号</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen ~]<span class="comment"># nl /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br><span class="line">1DEVICE=eth0</span><br><span class="line">2BOOTPROTO=dhcp</span><br><span class="line">3ONBOOT=yes</span><br></pre></td></tr></table></figure><blockquote><p>more  一页一页翻动</p></blockquote><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter   ：代表向下翻『一行』；</li><li>/字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f    ：立刻显示出档名以及目前显示的行数；</li><li>q    ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen etc]<span class="comment"># more /etc/csh.login</span></span><br><span class="line">....(中间省略)....</span><br><span class="line">--More--(28%) <span class="comment"># 重点在这一行喔！你的光标也会在这里等待你的命令</span></span><br></pre></td></tr></table></figure><blockquote><p>less  一页一页翻动，以下实例输出/etc/man.config文件的内容：</p></blockquote><p>less运行时可以输入的命令有：</p><ul><li>空白键  ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>/字串  ：向下搜寻『字串』的功能；</li><li>?字串  ：向上搜寻『字串』的功能；</li><li>n   ：重复前一个搜寻 (与 / 或 ? 有关！)</li><li>N   ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li><li>q   ：离开 less 这个程序；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen etc]<span class="comment"># more /etc/csh.login</span></span><br><span class="line">....(中间省略)....</span><br><span class="line">:   <span class="comment"># 这里可以等待你输入命令！</span></span><br></pre></td></tr></table></figure><blockquote><p>head  取出文件前面几行</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen etc]<span class="comment"># head -n 20 /etc/csh.login</span></span><br></pre></td></tr></table></figure><blockquote><p>tail  取出文件后面几行</p></blockquote><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen etc]<span class="comment"># tail -n 20 /etc/csh.login</span></span><br></pre></td></tr></table></figure><blockquote><p>拓展：Linux 链接概念</p></blockquote><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，<strong>ln</strong> 命令产生硬链接。</p><p><strong>硬连接</strong></p><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><p><strong>软连接</strong></p><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><p><strong>测试：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@kuangshen /]<span class="comment"># cd /home</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># touch f1 # 创建一个测试文件f1</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># ls</span></span><br><span class="line">f1</span><br><span class="line">[root@kuangshen home]<span class="comment"># ln f1 f2     # 创建f1的一个硬连接文件f2</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># ln -s f1 f3   # 创建f1的一个符号连接文件f3</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># ls -li       # -i参数显示文件的inode节点信息</span></span><br><span class="line">397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f1</span><br><span class="line">397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f2</span><br><span class="line">397248 lrwxrwxrwx 1 root root     2 Mar 13 00:50 f3 -&gt; f1</span><br></pre></td></tr></table></figure><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo 字符串输出 &gt;&gt; f1 输出到 f1文件</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># echo &quot;I am f1 file&quot; &gt;&gt;f1</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cat f1</span></span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]<span class="comment"># cat f2</span></span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]<span class="comment"># cat f3</span></span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]<span class="comment"># rm -f f1</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cat f2</span></span><br><span class="line">I am f1 file</span><br><span class="line">[root@kuangshen home]<span class="comment"># cat f3</span></span><br><span class="line">cat: f3: No such file or directory</span><br></pre></td></tr></table></figure><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><ul><li>删除符号连接f3,对f1,f2无影响；</li><li>删除硬连接f2，对f1,f3也无影响；</li><li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li><li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;目录管理&quot;&gt;&lt;a href=&quot;#目录管理&quot; class=&quot;headerlink&quot; title=&quot;目录管理&quot;&gt;&lt;/a&gt;目录管理&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;绝对路径和相对路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们知道Linux的目录结构为树状结</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>李同学又开始写博客啦</title>
    <link href="https://lowbattery.cn/passages/My-New-Post/"/>
    <id>https://lowbattery.cn/passages/My-New-Post/</id>
    <published>2020-01-27T09:13:00.000Z</published>
    <updated>2020-02-05T16:47:36.794Z</updated>
    
    <content type="html"><![CDATA[<p>新的一年好好加油！ヾ(^▽^ヾ)<br><img src="/images/smile.png"></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;新的一年好好加油！ヾ(^▽^ヾ)&lt;br&gt;&lt;img src=&quot;/images/smile.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>HDU - 6638 压维 + 线段树维护区间最大子段和</title>
    <link href="https://lowbattery.cn/passages/HDU-6638-%E5%8E%8B%E7%BB%B4-%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/"/>
    <id>https://lowbattery.cn/passages/HDU-6638-%E5%8E%8B%E7%BB%B4-%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/</id>
    <published>2019-09-13T03:26:00.000Z</published>
    <updated>2020-01-27T14:49:24.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>n 个点信息 (x,y,w)，找矩形满足矩形中的 w 和最大<br>因为 n &lt;= 2000 所以可以以x排序，枚举左右端点，然后线段树维护最大子段和<br>如果只是求区间 w 的和可以考虑主席树<br>线段树维护最大子段和的方法很巧妙，另外要注意同一x坐标的点要全部update之后才可以更新最大值。</p></blockquote><span id="more"></span><p>```cpp<br>#include &lt;bits/stdc++.h&gt;<br>#define ll long long<br>#define lc o&lt;&lt;1<br>#define rc o&lt;&lt;1|1<br>#define mid ((l+r)&gt;&gt;1)<br>using namespace std;<br>const int maxn = 1e5 + 5;<br>ll e[maxn<em>5],lcp[maxn</em>5],lcs[maxn<em>5],sum[maxn</em>5];<br>int vy[maxn],n;<br>struct Node{<br>    int x,y,w;<br>    bool operator &lt; (const Node&amp; rhs) const{<br>        return x &lt; rhs.x;<br>    }<br>}node[maxn];</p><p>void up(int o){<br>    sum[o] = sum[lc] + sum[rc];<br>    lcp[o] = max(lcp[lc] , sum[lc] + lcp[rc]);<br>    lcs[o] = max(lcs[rc],  lcs[lc] + sum[rc]);<br>    e[o] = max(max(e[lc],e[rc]),lcs[lc] + lcp[rc]);<br>}<br>void build(int o,int l,int r){<br>    e[o] = lcp[o] = lcs[o] = sum[o] = 0;<br>    if(l == r) return ;<br>    build(lc,l,mid);<br>    build(rc,mid+1,r);<br>}</p><p>void update(int o,int l,int r,int pos,int val){<br>    if(l == r){<br>        e[o] = sum[o] = lcp[o] = lcs[o] = e[o] + val;<br>        return ;<br>    }<br>    if(pos&lt;=mid) update(lc, l, mid, pos, val);<br>    else update(rc, mid+1, r, pos, val);<br>    up(o);<br>}<br>int main(int argc, const char * argv[]) {<br>    int t;<br>    scanf(“%d”,&amp;t);<br>    while(t–){<br>        int cnt = 0;<br>        scanf(“%d”,&amp;n);<br>        for(int i=1;i&lt;=n;i++)<br>            scanf(“%d %d %d”,&amp;node[i].x,&amp;node[i].y,&amp;node[i].w),vy[++cnt] = node[i].y;<br>        sort(node+1, node+n+1);<br>        sort(vy+1,vy+n+1);<br>        int m = unique(vy+1, vy+n+1) - (vy + 1);<br>        for(int i=1;i&lt;=n;i++)<br>            node[i].y = lower_bound(vy+1, vy+m+1, node[i].y) - vy;<br>        ll ans = 0;<br>        for(int i=1;i&lt;=n;i++){<br>            if(i!=1 &amp;&amp; node[i].x == node[i-1].x) continue;<br>            build(1,1,m);<br>            for(int j=i;j&lt;=n;j++){<br>                update(1, 1, m, node[j].y, node[j].w);<br>                if(node[j].x != node[j+1].x || j == n)<br>                    ans = max(ans,e[1]);<br>            }<br>        }<br>        printf(“%lld\n”,ans);<br>    }<br>    return 0;<br>}```</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;n 个点信息 (x,y,w)，找矩形满足矩形中的 w 和最大&lt;br&gt;因为 n &amp;lt;= 2000 所以可以以x排序，枚举左右端点，然后线段树维护最大子段和&lt;br&gt;如果只是求区间 w 的和可以考虑主席树&lt;br&gt;线段树维护最大子段和的方法很巧妙，另外要注意同一x坐标的点要全部update之后才可以更新最大值。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://lowbattery.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://lowbattery.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="dp" scheme="https://lowbattery.cn/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>HDU 6695 二分最近</title>
    <link href="https://lowbattery.cn/passages/HDU-6695-%E4%BA%8C%E5%88%86%E6%9C%80%E8%BF%91/"/>
    <id>https://lowbattery.cn/passages/HDU-6695-%E4%BA%8C%E5%88%86%E6%9C%80%E8%BF%91/</id>
    <published>2019-09-12T13:22:00.000Z</published>
    <updated>2020-01-27T11:53:05.342Z</updated>
    
    <content type="html"><![CDATA[<p>每一个人都有必须选一个项目，每个项目都有一个能力值 x,y<br>项目的值为 选这个项目的人的能力的最大值<br>求俩个项目的差值最小</p><span id="more"></span><p>考虑按 x 排序 分别以每一个 x 为最大值</p><p>a1 b1  -&gt; y<br> a2 b2  -&gt; y</p><p> a3 b3   // max(x)  -&gt; search for y match min abs(x - y)</p><p> a4 b4<br> a5 b5<br>由于取 3 号为 x 最大值， 那么1，2号必定选 y<br>4，5号可以选 x 也可以选 y 那么可以考虑找区间内最接近 <strong>max(x)</strong> 的值<br>可以考虑用数据结构维护，也可以考虑分别找距离最近 y 的位置的编号<br>找编号要注意有可能存在找到的 y 和所选 <strong>max(x)</strong> 的编号相同的情况</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">1e18</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> id;ll x,y;&#125;e[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">con</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id; ll val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> con&amp; rhs) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val &lt; rhs.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node ai,node bi)</span></span>&#123;<span class="keyword">return</span> ai.x &lt; bi.x;&#125;</span><br><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>,&amp;e[i].x,&amp;e[i].y);</span><br><span class="line">            b[i].id = e[i].id = i;</span><br><span class="line">            b[i].val = e[i].y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(e+<span class="number">1</span>,e+n+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">        ll maxb = <span class="number">-1</span>;   <span class="comment">// [n,i) 的 b 最大值</span></span><br><span class="line">        ll ans = inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">1</span>,r = n,itr = <span class="number">-1</span>;  <span class="comment">// 找第一个小于等于的位置</span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(b[mid].val &lt;= e[i].x)&#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                    itr = mid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(itr&gt;=<span class="number">1</span> &amp;&amp; e[i].id == b[itr].id) itr--;</span><br><span class="line">            <span class="keyword">if</span>(itr&gt;=<span class="number">1</span>) ans = <span class="built_in">min</span>(ans,<span class="built_in">abs</span>(<span class="built_in">max</span>(b[itr].val,maxb) - e[i].x));</span><br><span class="line">            l = <span class="number">1</span>;r = n;itr = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(b[mid].val &gt;= e[i].x)&#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                    itr = mid;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(itr&lt;=n &amp;&amp; e[i].id == b[itr].id) itr++;</span><br><span class="line">            <span class="keyword">if</span>(itr&lt;=n) ans = <span class="built_in">min</span>(ans,<span class="built_in">abs</span>(<span class="built_in">max</span>(b[itr].val,maxb) - e[i].x));</span><br><span class="line">            maxb = <span class="built_in">max</span>(maxb,e[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> a1 b1  -&gt; y</span></span><br><span class="line"><span class="comment"> a2 b2  -&gt; y</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> a3 b3   // max(x)  -&gt; search for y match min abs(x - y)</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> a4 b4</span></span><br><span class="line"><span class="comment"> a5 b5</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;每一个人都有必须选一个项目，每个项目都有一个能力值 x,y&lt;br&gt;项目的值为 选这个项目的人的能力的最大值&lt;br&gt;求俩个项目的差值最小&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://lowbattery.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二分" scheme="https://lowbattery.cn/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>HDU - 6704 后缀数组 + 主席树</title>
    <link href="https://lowbattery.cn/passages/HDU-6704-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    <id>https://lowbattery.cn/passages/HDU-6704-%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84-%E4%B8%BB%E5%B8%AD%E6%A0%91/</id>
    <published>2019-09-12T12:48:00.000Z</published>
    <updated>2020-01-27T11:54:59.521Z</updated>
    
    <content type="html"><![CDATA[<p>给一个字符串 s<br>对于每个询问 q(l,r,k) 返回子串 s<del>l-r</del> 第k次出现的位置<br>由于后缀数组按照字典序排序，所以可以主席树维护SA，这样就能找到第k次出现的位置<br>取 l 为左端点的后缀，len = r - l + 1,那么考虑排名左右的后缀中 lcp(i,i+x) &gt;= len,<br>lcp(i,i-x) &gt;= len 的后缀一定存在相同子串，由于后缀数组的性质，可以考虑二分找到 x</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> linf (1ll&lt;&lt;60)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> iinf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cl(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lc o&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rc o&lt;&lt;1|1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxk = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SuffixArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// sa[i] 第 i 名 的 起始位置  i -&gt; (1-len)</span></span><br><span class="line">    <span class="comment">// rank[i] 起始位置为 i 的后缀rank i -&gt; ( 0 - len-1)</span></span><br><span class="line">    <span class="comment">// height[i] lcp(sa[i],sa[i-1]) i -&gt; (1 - len)</span></span><br><span class="line">    <span class="keyword">int</span> sa[maxn], rank[maxn], ws[maxn], wv[maxn], wa[maxn], wb[maxn], height[maxn], st[maxk+<span class="number">2</span>][maxn], N;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> l)</span></span>&#123;<span class="keyword">return</span> r[a]==r[b] <span class="keyword">and</span> r[a+l]==r[b+l];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;<span class="built_in">cl</span>(sa), <span class="built_in">cl</span>(rank), <span class="built_in">cl</span>(ws), <span class="built_in">cl</span>(wv), <span class="built_in">cl</span>(wa), <span class="built_in">cl</span>(wb), <span class="built_in">cl</span>(height);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;   <span class="comment">// 字符串，字符串长度，基数</span></span><br><span class="line">        N=n;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">int</span> i, j, k=<span class="number">0</span>, p, *x=wa, *y=wb, *t;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)ws[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)ws[x[i]=r[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++)ws[i]+=ws[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--ws[x[i]]]=i;</span><br><span class="line">        <span class="keyword">for</span>(p=j=<span class="number">1</span>;p&lt;n;j&lt;&lt;=<span class="number">1</span>,m=p)&#123;</span><br><span class="line">            <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++)y[p++]=i;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(sa[i]&gt;=j)y[p++]=sa[i]-j;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)wv[i]=x[y[i]];</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)ws[i]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)ws[wv[i]]++;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++)ws[i]+=ws[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)sa[--ws[wv[i]]]=y[i];</span><br><span class="line">            <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,i=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                x[sa[i]]=<span class="built_in">cmp</span>(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)rank[sa[i]]=i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;height[rank[i++]]=k)</span><br><span class="line">            <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rank[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build_st</span><span class="params">()</span>     <span class="comment">//st表</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, k;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)st[<span class="number">0</span>][i]=height[i];</span><br><span class="line">        <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=maxk;k++)</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;k)<span class="number">-1</span>&lt;=N;i++)</span><br><span class="line">                st[k][i]=<span class="built_in">min</span>(st[k<span class="number">-1</span>][i],st[k<span class="number">-1</span>][i+(<span class="number">1</span>&lt;&lt;k<span class="number">-1</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>   <span class="comment">//最长公共前缀</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=rank[x], r=rank[y];</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)<span class="built_in">swap</span>(l,r);</span><br><span class="line">        <span class="keyword">if</span>(l==r)<span class="keyword">return</span> N-sa[l];</span><br><span class="line">        <span class="keyword">int</span> t=<span class="built_in">log2</span>(r-l);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(st[t][l+<span class="number">1</span>],st[t][r-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;SA;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> root[maxn],cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,num;&#125;e[maxn*<span class="number">40</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;<span class="built_in">cl</span>(root);cnt = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        x = ++cnt;</span><br><span class="line">        e[x] = e[y];</span><br><span class="line">        e[x].num++;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">update</span>(e[x].l,e[y].l,l,mid,pos);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">update</span>(e[x].r,e[y].r,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line">        <span class="keyword">int</span> ls = e[e[x].l].num - e[e[y].l].num;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=ls) <span class="keyword">return</span> <span class="built_in">query</span>(e[x].l,e[y].l,l,mid,k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(e[x].r,e[y].r,mid+<span class="number">1</span>,r,k-ls);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;seg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,q,len;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;len,&amp;q);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) r[i] = s[i];</span><br><span class="line">        r[len] = <span class="number">0</span>;</span><br><span class="line">        SA.<span class="built_in">clear</span>();</span><br><span class="line">        SA.<span class="built_in">build</span>(r,len,<span class="number">300</span>);</span><br><span class="line">        SA.<span class="built_in">build_st</span>();</span><br><span class="line">        seg.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) seg.<span class="built_in">update</span>(seg.root[i],seg.root[i<span class="number">-1</span>],<span class="number">1</span>,len,SA.sa[i]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="keyword">int</span> l,r,k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line">            <span class="keyword">int</span> sublen = r - l + <span class="number">1</span>;</span><br><span class="line">            l--;</span><br><span class="line">            <span class="keyword">int</span> ql = SA.rank[l],qr = SA.rank[l];</span><br><span class="line">            <span class="keyword">int</span> nl = <span class="number">1</span>, nr = SA.rank[l];</span><br><span class="line">            <span class="keyword">while</span>(nl &lt;= nr)&#123;</span><br><span class="line">                <span class="keyword">int</span> nmid = (nl + nr)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(SA.<span class="built_in">lcp</span>(SA.sa[nmid],l) &gt;= sublen)&#123;</span><br><span class="line">                    ql = nmid;</span><br><span class="line">                    nr =  nmid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    nl = nmid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nl = SA.rank[l]; nr = len;</span><br><span class="line">            <span class="keyword">while</span>(nl &lt;= nr)&#123;</span><br><span class="line">                <span class="keyword">int</span> nmid = (nl + nr)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(SA.<span class="built_in">lcp</span>(SA.sa[nmid],l) &gt;= sublen)&#123;</span><br><span class="line">                    qr = nmid;</span><br><span class="line">                    nl = nmid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    nr = nmid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; SA.rank[l] &lt;&lt; &quot; &quot; &lt;&lt; ql &lt;&lt; &quot; &quot; &lt;&lt; qr &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span>(qr-ql+<span class="number">1</span>&lt;k) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,seg.<span class="built_in">query</span>(seg.root[qr],seg.root[ql<span class="number">-1</span>],<span class="number">1</span>,len,k));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;给一个字符串 s&lt;br&gt;对于每个询问 q(l,r,k) 返回子串 s&lt;del&gt;l-r&lt;/del&gt; 第k次出现的位置&lt;br&gt;由于后缀数组按照字典序排序，所以可以主席树维护SA，这样就能找到第k次出现的位置&lt;br&gt;取 l 为左端点的后缀，len = r - l + 1,那么考虑排名左右的后缀中 lcp(i,i+x) &amp;gt;= len,&lt;br&gt;lcp(i,i-x) &amp;gt;= len 的后缀一定存在相同子串，由于后缀数组的性质，可以考虑二分找到 x&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://lowbattery.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="主席树" scheme="https://lowbattery.cn/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
    <category term="后缀数组" scheme="https://lowbattery.cn/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>ACM模板</title>
    <link href="https://lowbattery.cn/passages/ACM%E6%A8%A1%E6%9D%BF/"/>
    <id>https://lowbattery.cn/passages/ACM%E6%A8%A1%E6%9D%BF/</id>
    <published>2019-09-02T03:26:00.000Z</published>
    <updated>2021-03-10T12:36:10.494Z</updated>
    
    <content type="html"><![CDATA[<p>包括LUCAS，Dijkstra最短路径， krusal求最小生成树</p><span id="more"></span><p>```cpp<br>//<br>//  main.cpp<br>//  my_template<br>//<br>//  Created by apple on 2019/4/7.<br>//  Copyright © 2019 apple. All rights reserved.<br>//<br>#include <iostream><br>#include <algorithm><br>#include <vector><br>#include <queue><br>#define ll long long<br>#define pii pair&lt;int,int&gt;<br>using namespace std;</queue></vector></algorithm></iostream></p><p>/*<br> Lucas定理求组合数 C(n,m)<br>    1.mod为素数,mod不为素数考虑exgcd<br>    2.调用方式： lucas(n,m);<br> <em>/<br>const int mod = 1e9 + 7;<br>ll quick_pow(ll a,ll m){<br>    ll ans = 1;<br>    while(m){<br>        if(m&amp;1) ans = (ans * a)%mod;<br>        a = (a</em>a)%mod;<br>        m &gt;&gt;= 1;<br>    }<br>    return ans;<br>}<br>ll inv(ll x){return quick_pow(x, mod-2);}<br>ll comb(ll n,ll m){<br>    if(m&gt;n) return 0;<br>    ll up = 1;ll down = 1;<br>    for(int i = n-m+1;i&lt;=n;i++) up = (up<em>i)%mod;<br>    for(int i=1;i&lt;=m;i++) down = (down</em>i)%mod;<br>    return up*inv(down)%mod;<br>}<br>ll lucas(ll n,ll m){<br>    if(m==0) return 1;<br>    return comb(n%mod,m%mod)*lucas(n/mod,m/mod)%mod;<br>}</p><p>/*<br> krusal求最小生成树<br> */<br>const int maxn = 1e5;<br>int f[maxn];<br>int size[maxn];<br>struct EGE{<br>    int from,to,w;<br>    EGE (int a,int b,int c): from(a),to(b),w(c){}<br>    EGE(){}<br>};EGE edge[maxn];<br>int find(int x){<br>    if(x == f[x]) return x;<br>    f[x] = find(f[x]);<br>    return f[x];<br>}<br>void join(int fx,int fy){<br>    if(size[fx] &gt; size[fy]) swap(fx,fy);<br>    f[fx] = fy; size[fy] += size[fx];<br>}<br>bool cmp(EGE a,EGE b){return a.w &lt; b.w;}<br>void krusal()<br>{<br>    int n,m,x,y,z;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    for(int i=1;i&lt;=n;i++){<br>        f[i] = i;<br>        size[i] = 1;<br>    }<br>    for(int i=1;i&lt;=m;i++){<br>        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;<br>        edge[i] = {x,y,z};<br>    }<br>    sort(edge+1,edge+m+1,cmp);<br>    int road = n-1;  ll cost = 0;<br>    for(int i=1;i&lt;=m;i++){<br>        int fx = find(edge[i].from);<br>        int fy = find(edge[i].to);<br>        if(fx == fy) continue;<br>        join(fx,fy);<br>        road–; cost += edge[i].w;<br>        if(road==0) break;<br>    }<br>    if(road)  cout &lt;&lt; “orz”;<br>    else cout &lt;&lt; cost;<br>}</p><p>/*<br>    Dijkstra<br><em>/<br>vector<EGE> g[maxn];<br>int dis[maxn];<br>void dijkstra(int s){<br>    priority_queue&lt;pii,vector<pii>,greater<pii> &gt; pq;<br>    memset(dis, 0x3f3f3f3f, sizeof(dis));<br>    dis[s] = 0;<br>    pq.push(pii(0,s));<br>    while(!pq.empty()){<br>        pii now = pq.top(); pq.pop();<br>        int u = now.second;<br>        if(now.first &gt; dis[u]) continue;<br>        for(int i=0;i&lt;g[u].size();i++){<br>            int v = g[u][i].to;<br>            if(dis[v] &gt; g[u][i].w + dis[u]){<br>                dis[v] = g[u][i].w + dis[u];<br>                pq.push(pii(dis[v],v));<br>            }<br>        }<br>    }<br>}<br>/</pii></pii></EGE></em><br> shortpath in DAG 可以解决有向无环图上带负权的最短路，dp的思想<br> 注意:如果多组数据 vector 记得 clear() cnt 归零<br> */<br>int topo[maxn],vis[maxn],cnt = 0;<br>//vector<EGE> g[maxn];<br>void dfs(int s){       // dfs求拓扑序列<br>    vis[s] = 1;<br>    for(int i=0;i&lt;g[s].size();i++){<br>        int to = g[s][i].to;<br>        if(!vis[to])  dfs(to);<br>    }<br>    topo[cnt++] = s;<br>}<br>void dagSP(int s){<br>    int i = cnt;<br>    int dis[maxn];<br>    memset(dis, 0x3f, sizeof(dis));<br>    while(topo[–i]!=s);    //在拓扑序列中找到s的位置<br>    for(;i&gt;=0;i–){<br>        int u = topo[i];<br>        for(int j=0;j&lt;g[u].size();j++){<br>            int v = g[u][j].to;<br>            dis[v] = min(dis[v],dis[u] + g[u][j].w);<br>        }<br>    }<br>}</EGE></p><p>int main(int argc, const char * argv[]) {<br>    krusal();<br>    return 0;<br>}</p><p>}```</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;包括LUCAS，Dijkstra最短路径， krusal求最小生成树&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://lowbattery.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="https://lowbattery.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>HDU-6703 array</title>
    <link href="https://lowbattery.cn/passages/HDU-6703-array/"/>
    <id>https://lowbattery.cn/passages/HDU-6703-array/</id>
    <published>2019-09-01T11:56:00.000Z</published>
    <updated>2020-01-27T11:56:38.827Z</updated>
    
    <content type="html"><![CDATA[<p>这一题找区间mex，同时有单点修改，强制在线。<br>区间中大于k的值马上可以想到主席树<br>解决mex我的想法是在权值线段树上加上一个区间是否有间隙的标记 vis<br>但是我没有想到单点修改怎么做，虽然注意到这个单点修改其实就是删除这个点<br>正确的做法是用set维护已经删掉的位置，删掉这个位置的值之后这个值一定可以选，因为所有元素值唯一<br>主席树上和set中同时找最小值，然后取最小<br>主要是query的写法注意一下，要同时满足大于k和区间vis = 0,且最靠左<br>如果k &lt; mid 即左右区间都可以选，如果左区间有空隙则优先查询左区间<br>如果左区间找到了返回<br>如果没找到就右区间找<br>（<del>其实复杂度存疑</del> ）</p><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> root[maxn],cnt = <span class="number">0</span>,a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,num,vis;&#125;e[maxn*<span class="number">40</span>];</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; subs;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; l &lt;&lt; &quot; &quot; &lt;&lt; r &lt;&lt; &quot; &quot; &lt;&lt; pos &lt;&lt; endl;</span></span><br><span class="line">    x = ++cnt;</span><br><span class="line">    e[x] = e[y];</span><br><span class="line">    e[x].num++;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;e[x].vis = <span class="number">1</span>; <span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=mid) <span class="built_in">update</span>(e[x].l,e[y].l,l,mid,pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(e[x].r,e[y].r,mid+<span class="number">1</span>,r,pos);</span><br><span class="line">    <span class="keyword">if</span>(e[e[x].l].vis == <span class="number">0</span> || e[e[x].r].vis == <span class="number">0</span>) e[x].vis = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> e[x].vis = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; l &lt;&lt; &quot; &quot; &lt;&lt; r &lt;&lt; &quot; &quot; &lt;&lt; e[e[x].l].vis &lt;&lt; &quot; &quot; &lt;&lt; e[e[x].r].vis &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> ans = inf;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=mid &amp;&amp; e[e[x].l].vis == <span class="number">0</span>) ans = <span class="built_in">query</span>(e[x].l,l,mid,k);</span><br><span class="line">    <span class="keyword">if</span>(ans != inf) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(e[e[x].r].vis == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">query</span>(e[x].r,mid+<span class="number">1</span>,r,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,op,qr,n,m,k,tmp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]),<span class="built_in">update</span>(root[i],root[i<span class="number">-1</span>],<span class="number">1</span>,maxn,a[i]);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line">                subs.<span class="built_in">insert</span>(a[tmp^ans]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tmp = inf;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;qr,&amp;k);</span><br><span class="line">                qr = qr^ans; k = k^ans;</span><br><span class="line">               <span class="comment">// cout &lt;&lt; &quot;qr k :&quot; &lt;&lt; qr &lt;&lt; &quot; &quot; &lt;&lt; k &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">auto</span> itr = subs.<span class="built_in">lower_bound</span>(k);</span><br><span class="line">                <span class="keyword">if</span>(itr!=subs.<span class="built_in">end</span>()) tmp = *itr;</span><br><span class="line">                ans = <span class="built_in">query</span>(root[qr],<span class="number">1</span>,maxn,k);</span><br><span class="line">                <span class="keyword">if</span>(ans == inf &amp;&amp; tmp == inf) ans = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> ans = <span class="built_in">min</span>(ans,tmp);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++) e[i].vis = <span class="number">0</span>,e[i].num = <span class="number">0</span>;</span><br><span class="line">        subs.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题区间在[1,r]，如果要求[l,r]需要在权值上保存最左边出现的pos</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  hdu - 6703</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by apple on 2019/9/12.</span></span><br><span class="line"><span class="comment">//  Copyright © 2019 apple. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l+r)&gt;&gt;1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> root[maxn],cnt = <span class="number">0</span>,a[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> l,r,mix;&#125;e[maxn*<span class="number">40</span>];</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; subs;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; l &lt;&lt; &quot; &quot; &lt;&lt; r &lt;&lt; &quot; &quot; &lt;&lt; pos &lt;&lt; &quot; &quot; &lt;&lt; val &lt;&lt; endl;</span></span><br><span class="line">    x = ++cnt;</span><br><span class="line">    e[x] = e[y];</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;e[x].mix = pos; <span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">if</span>(val&lt;=mid) <span class="built_in">update</span>(e[x].l,e[y].l,l,mid,val,pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">update</span>(e[x].r,e[y].r,mid+<span class="number">1</span>,r,val,pos);</span><br><span class="line">    e[x].mix = <span class="built_in">min</span>(e[e[x].l].mix,e[e[x].r].mix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k,<span class="keyword">int</span> ql)</span></span>&#123;  <span class="comment">//权值线段树[l,r] 表示 val 在 [l,r] 出现过的 最靠左pos</span></span><br><span class="line">   <span class="comment">// cout &lt;&lt; l &lt;&lt; &quot; &quot; &lt;&lt; r &lt;&lt; &quot; &quot; &lt;&lt; e[x].mix &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> ans = inf;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=mid &amp;&amp; e[e[x].l].mix &lt; ql) ans = <span class="built_in">min</span>(ans,<span class="built_in">query</span>(e[x].l, l, mid, k, ql));</span><br><span class="line">    <span class="keyword">if</span>(ans != inf) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e[e[x].r].mix &lt; ql) <span class="keyword">return</span> <span class="built_in">query</span>(e[x].r, mid+<span class="number">1</span>, r, k, ql);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> inf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,op,qr,n,m,k,tmp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]),<span class="built_in">update</span>(root[i],root[i<span class="number">-1</span>],<span class="number">1</span>,maxn,a[i],i);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;op);</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line">                subs.<span class="built_in">insert</span>(a[tmp^ans]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tmp = inf;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;qr,&amp;k);</span><br><span class="line">                qr = qr^ans; k = k^ans;</span><br><span class="line">               <span class="comment">// cout &lt;&lt; &quot;qr k :&quot; &lt;&lt; qr &lt;&lt; &quot; &quot; &lt;&lt; k &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">auto</span> itr = subs.<span class="built_in">lower_bound</span>(k);</span><br><span class="line">                <span class="keyword">if</span>(itr!=subs.<span class="built_in">end</span>()) tmp = *itr;</span><br><span class="line">                ans = <span class="built_in">query</span>(root[qr],<span class="number">1</span>,maxn,k,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(ans == inf &amp;&amp; tmp == inf) ans = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> ans = <span class="built_in">min</span>(ans,tmp);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++) e[i].mix = <span class="number">0</span>;</span><br><span class="line">        subs.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这一题找区间mex，同时有单点修改，强制在线。&lt;br&gt;区间中大于k的值马上可以想到主席树&lt;br&gt;解决mex我的想法是在权值线段树上加上一个区间是否有间隙的标记 vis&lt;br&gt;但是我没有想到单点修改怎么做，虽然注意到这个单点修改其实就是删除这个点&lt;br&gt;正确的做法是用set维护已经删掉的位置，删掉这个位置的值之后这个值一定可以选，因为所有元素值唯一&lt;br&gt;主席树上和set中同时找最小值，然后取最小&lt;br&gt;主要是query的写法注意一下，要同时满足大于k和区间vis = 0,且最靠左&lt;br&gt;如果k &amp;lt; mid 即左右区间都可以选，如果左区间有空隙则优先查询左区间&lt;br&gt;如果左区间找到了返回&lt;br&gt;如果没找到就右区间找&lt;br&gt;（&lt;del&gt;其实复杂度存疑&lt;/del&gt; ）&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://lowbattery.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="主席树" scheme="https://lowbattery.cn/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
  </entry>
  
</feed>
